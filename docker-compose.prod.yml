version: '3.8'

services:
  # Database service
  db:
    image: postgres:16-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-launchkit-prod}_db
    volumes:
      - pg_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-launchkit_prod}
      - POSTGRES_USER=${POSTGRES_USER:-launchkit}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-launchkit}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis service
  redis:
    image: redis:7-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-launchkit-prod}_redis
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # RabbitMQ service
  amqp:
    image: rabbitmq:3-management-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-launchkit-prod}_amqp
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBITMQ_DEFAULT_USER:-launchkit}
      - RABBITMQ_DEFAULT_PASS=${RABBITMQ_DEFAULT_PASS}
      - RABBITMQ_DEFAULT_VHOST=/
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # API service
  api:
    image: ghcr.io/launchkit/launchkit-api:latest
    container_name: ${COMPOSE_PROJECT_NAME:-launchkit-prod}_api
    volumes:
      - static_data:/app/staticfiles
      - media_data:/app/media
    environment:
      - DJANGO_DEBUG=${DJANGO_DEBUG:-0}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
      - CSRF_TRUSTED_ORIGINS=${CSRF_TRUSTED_ORIGINS}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - EMAIL_BACKEND=${EMAIL_BACKEND}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
      - DJANGO_STATIC_ROOT=${DJANGO_STATIC_ROOT:-/app/staticfiles}
      - DJANGO_MEDIA_ROOT=${DJANGO_MEDIA_ROOT:-/app/media}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    expose:
      - "8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      amqp:
        condition: service_healthy
    command: gunicorn config.wsgi:application -b 0.0.0.0:8000 -w 3 --timeout 120
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Celery Worker
  worker:
    image: ghcr.io/launchkit/launchkit-api:latest
    container_name: ${COMPOSE_PROJECT_NAME:-launchkit-prod}_worker
    volumes:
      - static_data:/app/staticfiles
      - media_data:/app/media
    environment:
      - DJANGO_DEBUG=${DJANGO_DEBUG:-0}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - EMAIL_BACKEND=${EMAIL_BACKEND}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
      - DJANGO_STATIC_ROOT=${DJANGO_STATIC_ROOT:-/app/staticfiles}
      - DJANGO_MEDIA_ROOT=${DJANGO_MEDIA_ROOT:-/app/media}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      amqp:
        condition: service_healthy
    command: celery -A config worker -l info
    restart: unless-stopped

  # Celery Beat Scheduler
  scheduler:
    image: ghcr.io/launchkit/launchkit-api:latest
    container_name: ${COMPOSE_PROJECT_NAME:-launchkit-prod}_scheduler
    volumes:
      - static_data:/app/staticfiles
      - media_data:/app/media
    environment:
      - DJANGO_DEBUG=${DJANGO_DEBUG:-0}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS}
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - EMAIL_BACKEND=${EMAIL_BACKEND}
      - DEFAULT_FROM_EMAIL=${DEFAULT_FROM_EMAIL}
      - DJANGO_STATIC_ROOT=${DJANGO_STATIC_ROOT:-/app/staticfiles}
      - DJANGO_MEDIA_ROOT=${DJANGO_MEDIA_ROOT:-/app/media}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      amqp:
        condition: service_healthy
    command: celery -A config beat -l info
    restart: unless-stopped

  # Next.js Frontend
  nextjs:
    image: ghcr.io/launchkit/launchkit-nextjs:latest
    container_name: ${COMPOSE_PROJECT_NAME:-launchkit-prod}_nextjs
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
    expose:
      - "3000"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Flower (Celery Monitoring)
  flower:
    image: mher/flower:latest
    container_name: ${COMPOSE_PROJECT_NAME:-launchkit-prod}_flower
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - FLOWER_BASIC_AUTH=${FLOWER_USER:-admin}:${FLOWER_PASSWORD}
    expose:
      - "5555"
    depends_on:
      - amqp
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: ${COMPOSE_PROJECT_NAME:-launchkit-prod}_nginx
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infra/auth/htpasswd:/etc/nginx/.htpasswd:ro
      - static_data:/var/www/static:ro
      - media_data:/var/www/media:ro
      - certs:/etc/letsencrypt:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api
      - nextjs
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Uptime Kuma (Monitoring)
  uptime-kuma:
    image: louislam/uptime-kuma:latest
    container_name: ${COMPOSE_PROJECT_NAME:-launchkit-prod}_uptime-kuma
    volumes:
      - uptime_kuma_data:/app/data
    ports:
      - "3001:3001"
    environment:
      - UPTIME_KUMA_PORT=3001
    profiles:
      - monitoring
    restart: unless-stopped

  # Dozzle (Log Viewer)
  dozzle:
    image: amir20/dozzle:latest
    container_name: ${COMPOSE_PROJECT_NAME:-launchkit-prod}_dozzle
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "9999:8080"
    profiles:
      - monitoring
    restart: unless-stopped

volumes:
  pg_data:
    driver: local
  redis_data:
    driver: local
  static_data:
    driver: local
  media_data:
    driver: local
  certs:
    driver: local
  uptime_kuma_data:
    driver: local

networks:
  default:
    name: ${COMPOSE_PROJECT_NAME:-launchkit-prod}_network
